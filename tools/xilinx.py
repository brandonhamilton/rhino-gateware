#!/usr/bin/env python3
#
#     _____                 
#    (, /   ) /)   ,        
#      /__ / (/     __   ___
#   ) /   \_ / )__(_/ (_(_)   Tools
#  (_/                      
#       Reconfigurable Hardware Interface
#          for computatioN and radiO
#          
#  ========================================
#        http://www.rhinoplatform.org
#  ========================================
#
#   Xilinx environment build
#   Copyright (C) 2012 Brandon Hamilton
#
#   This file is part of rhino-tools.
#
#   rhino-tools is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   rhino-tools is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with rhino-tools.  If not, see <http://www.gnu.org/licenses/>.

import os
import tools
import datetime
from decimal import *

#-----------------------------------------------------------------------------#
# Platform settings                                                           #
#-----------------------------------------------------------------------------#

XILINX_INSTALL_PATH = '/opt/Xilinx'  # Path to the Xilinx installation
XILINX_VERSION      = None           # Use a specific version
                                     # (If unavailable tool will autodetect and
                                     #  use latest installed version)
XILINX_TOOLS_TYPE   = 32             # Use 32-bit or 64-bit version of tools

#-----------------------------------------------------------------------------#
# Build the project in the current working directory                          #
#                                                                             #
# Parameters:                                                                 #
#   sources: A list of HDL source files. Each element of the list is a        #
#            dictionary with the following keys:                              #
#            'type': 'verliog' or 'vhdl'                                      #
#            'path': relative path to the file (from current directory)       #
#            'library': (optional) the library name of the hdl source         #    
#   build_name: A string to be used as a prefix for all generated files       #   
#   top: Top level HDL component (assumes same as build_name if not specified)#
#-----------------------------------------------------------------------------#
def build(device, sources, build_name, top=None):
    
    # Get the parameters
    ucf_file = "%s.ucf" % (build_name)
    top_module = top and top or build_name

    # Determine Xilinx tool paths
    def isValidVersion(v):
        try: 
            Decimal(v)
            return os.path.isdir(os.path.join(XILINX_INSTALL_PATH, v))
        except:
            return False
    vers = [ver for ver in os.listdir(XILINX_INSTALL_PATH) if isValidVersion(ver)]
    tools_version = str(XILINX_VERSION) in vers and str(XILINX_VERSION) or max(vers)
    xilinx_settings_file = '%s/%s/ISE_DS/settings%d.sh' % (XILINX_INSTALL_PATH, tools_version, XILINX_TOOLS_TYPE) 

    # Generate project file
    prjContents = ""
    for s in sources:
        prjContents += "%s %s ../%s\n" % (s["type"], s["library"] if "library" in s else "work", s["path"])

    tools.write_to_file("%s.prj" % (build_name), prjContents)

    # Generate XST script
    xstContents = """run
-ifn %s.prj
-top %s
-ifmt MIXED
-opt_mode SPEED
-reduce_control_sets auto
-ofn %s.ngc
-p %s""" % (build_name, top_module, build_name, device)
    tools.write_to_file("%s.xst" % (build_name), xstContents)

    # Generate Build script
    buildScriptContents = """#!/bin/bash
# Build Script for %s
# Autogenerated by rhino-tools at %s

source %s
# XST
xst -ifn %s.xst
# NGD
ngdbuild -uc %s %s.ngc
# Mapping
map -ol high -w %s.ngd
# Place and Route
par -ol high -w %s.ncd %s-routed.ncd
# Generate FPGA configuration
bitgen -g Binary:Yes -w %s-routed.ncd %s.bit
""" % (build_name, datetime.datetime.now(), xilinx_settings_file, build_name, ucf_file, build_name, build_name, build_name, build_name, build_name, build_name)
    build_script_file = "build_%s.sh" % (build_name)
    tools.write_to_file(build_script_file, buildScriptContents)
    os.system("chmod +x %s" % (build_script_file))   
    
    # Run the build
    os.system("./%s" % (build_script_file))   
